<!DOCTYPE html>
<html>
<head>
<style>

.table1 { /* css for the big table (one with minisquares) */
	border: none; border-collapse: collapse;
	font-size: 200%;
	position: fixed;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
}

.popup{ /* popup at the end */
	display: none;
  	position: fixed;
  	padding: 10px;
  	width: 280px;
  	left: 50%;
 	 margin-left: -150px;
  	height: 200px;
  	top: 50%;
  	margin-top: -100px;
  	background: #42f480;
  	z-index: 20;
	-webkit-box-shadow:  0px 0px 0px 9999px rgba(0, 0, 0, 0.5);
  	box-shadow:  0px 0px 0px 9999px rgba(0, 0, 0, 0.5);
}

table{/* all tables */
	height:100%;
	width:100%;
	table-layout:fixed;
	text-align: center;
}

.noBorderRow{/* instead of the thickBorderRow (for the first row, so no border is at the very top) */
	height:33%;
}

.BorderLeft{ /* border to the left of the squares within the minisquares */
	border-left: 1px solid #000; 
}

.BorderRow { /* border above the squares within the minisquares */
	border-top: 1px solid #000;
}

.thickBorderLeft{ /* thick border to the left of minisquares (to separate them) */
	background-color: white;
	border-left: 5px solid #000;
}

.bigTableCell{ /* the minisquares */
	background-color: white;
}

.thickBorderRow{ /* thick border above minisquares (to separate them) */
	height:33%;
	border-top: 5px solid #000;
}

.enabled {/* enabled buttons */
	transition-duration: 0.69s;
	width:100%; 
	height:100%;
	vertical-align: middle;
	background-color: blue;
}

.enabled:hover{ /* on-hover effect for enabled buttons */
	background-color: #ff0059;
	color: white;
}
.disabled { /* disabled buttons */
	height:100%;
	width:100%;
	vertical-align:middle;
	background-color: #f4ee42;
}
</style>
</head>
<body onload = "onload()"><!-- onload() is done when page is loaded-->
<script>
var timer = setInterval(myTimer, 1000);//timer object that does myTimer() every second
var get = new XMLHttpRequest();//ajax variable specifically for GET requests
var getBoard9;//used for getting the returning board from http requests
var postBoard9;//used for sending the board to the server (there are 2 boards so that we can check if the board has changed)
var returns;//variable for parsing the responseText from http requests
var square;
get.onreadystatechange = function() {
    if (get.readyState == XMLHttpRequest.DONE) {
    	returns = get.responseText.split(",");//splitting up the returning text into encoded board and minisquare pointer
        getBoard9 = decode(returns[0], 3);//decoding board
        square = parseInt(returns[1]);//getting minisquare pointer
       	if (getBoard9 !== postBoard9){//checking if the board has changed
			setBoard(getBoard9);//changing the displayed board
			enableButtons(square);//enabling buttons according to the minisquare pointer
			if (getTurn() === 2){//if the turn now is for O's, check if X's have just won
				if (checkIfWon('X')){
					outputWinner('X');
				}
			}
			else{//if the turn now is for X's, check if O's have just won
				if (checkIfWon('O')){
					outputWinner('O');
				}
			}
			checkIfDrawn(getBoard9);//checks if game is a draw; if it is, then outputs the popup and shows it being a draw
		}
		if ((document.URL.includes('/player2') && getTurn() === 1) || (document.URL.includes('/player1') && getTurn() === 2)){
			disable();//disables the buttons if it isn't the player's turn
		}
    }
}
function checkIfDrawn(board){
	for (i = 0; i < board.length; i ++){
		if (board.charAt(i) === '_'){//if there is a space in the board, then it isn't a draw and exits the function
			return;
		}
	}
	outputWinner('_');//if there wasn't a space at all, then shows the popup
}
var start = new XMLHttpRequest();
start.onreadystatechange = function() {
	if (start.readyState == XMLHttpRequest.DONE) {//GET request done onload to get initial variables
		returns = start.responseText.split(",");
		getBoard9 = decode(returns[0], 3);//decoding the board
		postBoard9 = getBoard9;//sets the postBoard9 variable to the initial board
		square = parseInt(returns[1]);//getting minisquare pointer
		if ((document.URL.includes('/player2') && getTurn() === 2) || (document.URL.includes('/player1') && getTurn() === 1)){
			enableButtons(square);//enables the buttons if it is the player's turn
		}
	}
}
function sendStart(){//sending GET request
	start.open('GET', '/board/9', true);
	start.send();
}
function onload(){//function done first thing as soon as web page loads
	disable();//disables all buttons
	sendStart();//sends the initial GET request
}
function getTurn(){//returns the current player's turn according to getBoard9
	var noOfSymbols = 0;
	for (i = 0; i < getBoard9.length; i ++){
		if (getBoard9.charAt(i) === 'X' || getBoard9.charAt(i) === 'O'){
			noOfSymbols ++;//counts how many X's and O's there are (in total)
		}
	}
	if (noOfSymbols % 2 === 0){//if the total number of X's and O's are divisible by 2, then it is X's turn
		return 1;
	}
	else{
		return 2;//if not divisible by 2, then it is O's turn
	}
}
function enableButtons(tableID){//enable all buttons according to the minisquare pointer given (tableID)
	if (getSquare(tableID, getBoard9) === -1){//checks if the tableID is -1 or points to a full minisquare (so should be -1)
		//enables all the buttons
		var ID = 0;
		for (i = 1; i < 81; i += 9){
			for (j = 0; j < 9; j ++){
				ID = i + j;
				try{
					$('button' + ID).disabled = false;//means buttons can be pressed
					$('button' + ID).className = 'enabled';//gives them the css of enabled buttons instead of disabled
				}
				catch(error){
				}
			}
		}
	}
	else{//enables only buttons in the minisquare being pointed to by tableID
		for (i = (tableID * 9) + 1; i < ((tableID + 1) * 9) + 1; i ++){
			try{
				$('button' + i).disabled = false;
				$('button' + i).className = 'enabled';
			}
			catch(error){
			}
		}
	}
}
function getSquare(ID, board){//returns ID unless ID points to a full minisquare (at which point it returns -1 instead of ID)
	if (ID === -1){
		return -1;//returns ID
	}
	else if (checkIfFull(ID, board)){
		return -1; //checks if the minisquare has been captured or is full
	}
	else {
		return ID;
	}
}
function checkIfFull(minisquare, board){//basically checks if any of the button elements in the specified minisquare exist or not
//if any do exist, then that means the minisquare hasn't been captured nor is full
//if none exist, that means the minisquare has been captured or is full so returns true
	for (k = minisquare * 9; k < (minisquare * 9) + 9; k ++){
		if (board.charAt(k) === '_'){
			return false;
		}
	}
	return true;
}
var post = new XMLHttpRequest();
function changeCell(id){//function done when a button has been pressed. id is the id of the button that was pressed
//note that id is 1 more than it should be (i.e. the first button has id of 1 instead of 0)
	var num = (Math.floor((id - 1) / 9));//should be the same as square (the minisquare pointer variable) most of the time
	//except when square is -1, because the objective of num is to get the square the move that was just played in
	postBoard9 = getBoard9;//makes sure that postBoard9 is updated
	if (getTurn() === 1){//if it's X's turn
		$(id).innerHTML = 'X';//updates the displayed board
		postBoard9 = replaceChar(id - 1, postBoard9, 'X'); //updates postBoard9 variable
		if (checkIfCaptured(postBoard9.slice(num * 9, (num + 1) * 9), 'X')){ //checks if the minisquare was captured
			$('cell' + num).innerHTML = 'X'; //replaces the minisquare with X
			if (checkIfWon('X')){//did X win?
				outputWinner('X');//outputs the correct message saying that player 1 won
			}
			for (i = num * 9; i < (num + 1) * 9; i ++){
				if (postBoard9.charAt(i) === '_'){
					postBoard9 = replaceChar(i, postBoard9, '*');//replaces all the spaces with *
				}
			}	
		}
	}
	else{//does exact same thing but for O's
		$(id).innerHTML = 'O';
		postBoard9 = replaceChar(id - 1, postBoard9, 'O');
		if (checkIfCaptured(postBoard9.slice(num * 9, (num + 1) * 9), 'O')){
			$('cell' + num).innerHTML = 'O';
			if (checkIfWon('O')){
				outputWinner('O');
			}
			for (i = num * 9; i < (num + 1) * 9; i ++){
				if (postBoard9.charAt(i) === '_'){
					postBoard9 = replaceChar(i, postBoard9, '*');
				}
			}	
		}
	}
	checkIfDrawn(postBoard9);//checks if game is a draw; if it is, then outputs the popup and shows it being a draw
	square = getSquare((id - 1) % 9, postBoard9);//update the minisquare pointer
	post.open('POST', '/server9', true);
	post.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
	post.send("board=" + encode(postBoard9, 3) + "&square=" + square);//send the variables to the server
	disable();//disable all the buttons
}
function disable(){//function for disabling all the buttons
	var ID = 0;
	for (i = 1; i < 81; i += 9){
		for (j = 0; j < 9; j ++){
			ID = i + j;
			try{
				$('button' + ID).disabled = true;//buttons can't be pressed
				$('button' + ID).className = 'disabled';//buttons look disabled (disabled css applies to the buttons)
			}
			catch(error){
			}
		}
	}
}
function replaceChar(pos, string, symbol){//replaces the position (pos) in the string given with the symbol given
	var String2 = string.split("");
	String2[pos] = symbol;
	return String2.join("");
}
function setBoard(board){//updates the board displayed with the parameter
	var brd = board.split("");
	for (i = 0; i < brd.length; i ++){
		if (checkIfFull(Math.floor(i / 9), board)){//checks if minisquare is full or captured
			var start = Math.floor(i / 9);
			if (checkIfCaptured(board.slice(start * 9, (start + 1) * 9), 'X')){//if captured
				$('cell' + start).innerHTML = 'X';//replaces minisquare with X
				i = (start + 1) * 9;//skips to next to the next minisquare
			}
			else if (checkIfCaptured(board.slice(start * 9, (start + 1) * 9), 'O')){//does same with O
				$('cell' + start).innerHTML = 'O';
				i = (start + 1) * 9;
			}
			else{//if full but not captured
				$(i + 1).innerHTML = brd[i];//just updates squares from board variable				
			}
		}
		else if (brd[i] !== '_'){//X or O
			try{
				$(i + 1).innerHTML = brd[i];//updates squares from board variable
			}
			catch(error){
			}			
		}
		else{// blank spaces (_), replaces square with the html for the button
			try{
				if (!$(i + 1).innerHTML.includes("button")){
					$(i + 1).innerHTML = "<button type = \"button\" class = \"button\" id = \"button" + (i + 1) + "\" onclick = \"changeCell(" + (i + 1) + ")\"></button>";
				}
			}
			catch(error){
			}
		}
	}
}
function myTimer(){//this is done every second
	get.open('GET', '/board/9', true);
	get.send(null);//gets the board variable every second
}
function checkIfCaptured(board, symbol){//checks if minisquare has been captured
		if (board.charAt(0) === symbol){
			if (board.charAt(1) === symbol && board.charAt(2) === symbol){//line 0, 1, 2
				return true;
			}
			if (board.charAt(3) === symbol && board.charAt(6) === symbol){//line 0, 3, 6
				return true;
			}
			if (board.charAt(4) === symbol && board.charAt(8) === symbol){//line 0, 4, 8
				return true;
			}
		}
		if (board.charAt(1) === symbol){
			if (board.charAt(4) === symbol && board.charAt(7) === symbol){//line 1, 4, 7
				return true;
			}
		}
		if (board.charAt(2) === symbol){
			if (board.charAt(4) === symbol && board.charAt(6) === symbol){//line 2, 4, 6
				return true;
			}
			if (board.charAt(5) === symbol && board.charAt(8) === symbol){//line 2, 5, 8
				return true;
			}
		}
		if (board.charAt(3) === symbol){
			if (board.charAt(4) === symbol && board.charAt(5) === symbol){//line 3, 4, 5
				return true;
			}
		}
		if (board.charAt(6) === symbol){
			if (board.charAt(7) === symbol && board.charAt(8) === symbol){//line 6, 7, 8
				return true;
			}
		}
		return false;
}
function checkIfWon(symbol){//checks if the symbol has won the entire game
	if ($('cell0').innerHTML === symbol){
		if ($('cell1').innerHTML === symbol && $('cell2').innerHTML === symbol){//line 0, 1, 2
			return true;			
		}
		if ($('cell3').innerHTML === symbol && $('cell6').innerHTML === symbol){//line 0, 3, 6
			return true;
		}
		if ($('cell4').innerHTML === symbol && $('cell8').innerHTML === symbol){//line 0, 4, 8
			return true;
		}
	}
	if ($('cell1').innerHTML === symbol){
		if ($('cell4').innerHTML === symbol && $('cell7').innerHTML === symbol){//line 1, 4, 7
			return true;
		}
	}
	if ($('cell2').innerHTML === symbol){
		if ($('cell4').innerHTML === symbol && $('cell6').innerHTML === symbol){//line 2, 4, 6
			return true;
		}
		if ($('cell5').innerHTML === symbol && $('cell8').innerHTML === symbol){//line 2, 5, 8
			return true;
		}
	}
	if ($('cell3').innerHTML === symbol){
		if ($('cell4').innerHTML === symbol && $('cell5').innerHTML === symbol){//line 3, 4, 5
			return true;
		}
	}
	if ($('cell6').innerHTML === symbol){
		if ($('cell7').innerHTML === symbol && $('cell8').innerHTML === symbol){//line 6, 7, 8
			return true;
		}
	}
	return false;
}
var reset = new XMLHttpRequest();
function outputWinner(symbol){//for end of the game
	if (symbol === 'X'){//gets right message to appear
		$('output').innerHTML = "Player 1 has won";
	}
	else if (symbol === 'O'){
		$('output').innerHTML = "Player 2 has won";
	}
	else{
		$('output').innerHTML = "It's a draw!";
	}
	clearInterval(timer);//stops sending the GET requests every second
	disable();//disables all buttons
	show('popup1');//shows popup
}
function resetIt(menu){//function for buttons on the popup
	if (menu === true){//resets the board, then takes user to main menu
		reset.open('POST', '/reset', true);
		reset.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
		reset.send("option=9");
		location.assign("/");//changes the URL
	}
	else{//for menu === false, just resets the board and changes the entire html document to a new one with a fresh board
		reset.open('POST', '/reset', true);
		reset.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
		reset.send("option=9x9");
	}
}
reset.onreadystatechange = function() {
    if (reset.readyState == XMLHttpRequest.DONE) {
    	if (reset.responseText !== ""){
        	document.write(reset.responseText);//changes entire html document to a new one with a fresh board
			document.close();
		}
    }
}
$ = function(id) {//shortcut, can write $ instead of document.getElementById
  return document.getElementById(id);
}

var show = function(id) {//changes the css of something, so display is now block
//for the popup, the display is none until it is changed to block, effectively revealing it
	$(id).style.display ='block';
}
</script>
