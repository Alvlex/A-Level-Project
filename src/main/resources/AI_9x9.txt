<!DOCTYPE html>
<html>
<head>
<style>

.table1 { /* the big table */
	border: none; border-collapse: collapse;
	font-size: 200%;
	position: fixed;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
}

.popup{ /* the popup at the end */
	display: none;
  	position: fixed;
  	padding: 10px;
  	width: 280px;
  	left: 50%;
 	margin-left: -150px;
  	height: 200px;
  	top: 50%;
  	margin-top: -100px;
  	background: #42f480;
  	z-index: 20;
	-webkit-box-shadow:  0px 0px 0px 9999px rgba(0, 0, 0, 0.5);
  	box-shadow:  0px 0px 0px 9999px rgba(0, 0, 0, 0.5);
}

table{ /* all the tables, so there is the big one and then there are the 9 smaller ones (the minisquares) */
	height:100%;
	width:100%;
	table-layout:fixed;
	text-align: center;
}

.noBorderRow{
	height:33%;
}

.BorderLeft{ /* thin border to split squares within minisquares */
	border-left: 1px solid #000; 
}

.BorderRow {/* thin border to split squares within minisquares */
	border-top: 1px solid #000;
}

.thickBorderLeft{ /* the thick borders separating the minisquares */
	background-color: white;
	border-left: 5px solid #000;
}

.bigTableCell{ /* one of the minisquares */
	background-color: white;
}

.thickBorderRow{ /* the thick borders separating the minisquares */
	height:33%;
	border-top: 5px solid #000;
}

.enabled { /* buttons when enabled */
	transition-duration: 0.69s;
	width:100%; 
	height:100%;
	vertical-align: middle;
	background-color: blue;
}

.enabled:hover{ /* on-hover effect for the buttons when enabled */
	background-color: #ff0059;
	color: white;
}
.disabled { /* buttons when disabled */
	height:100%;
	width:100%;
	vertical-align:middle;
	background-color: #f4ee42;
}
</style>
</head>
<body onload = "onload()"> <!-- when page loads, this function ("onload()") is done -->
<script>
var get = new XMLHttpRequest(); //ajax variable for sending http requests
var getBoard9;
var postBoard9;
var square = -1;
get.onreadystatechange = function() {
    if (get.readyState === XMLHttpRequest.DONE) {//when something is returned from the get request
    	returns = get.responseText.split(','); //splits the returning text (so it gets the board and minisquare pointer)
        getBoard9 = decode(returns[0], 3);//decoding the board, given by the first part of the responseText
        square = parseInt(returns[1]);//gets the minisquare pointer
       	if (getBoard9 !== postBoard9){	//if the board has changed from something different to what is displayed right now
			setBoard(getBoard9);//update current board
			if (checkIfWon('O')){//check if O's have won because of this
				disable();
				outputWinner('O');//losing message
			}
			checkIfDrawn(getBoard9);//checks if game is a draw; if it is, then outputs the popup and shows it being a draw
		}
    }
}
function checkIfDrawn(board){
	for (i = 0; i < board.length; i ++){
		if (board.charAt(i) === '_'){//if there is a space in the board, then it isn't a draw and exits the function
			return;
		}
	}
	outputWinner('_');//if there wasn't a space at all, then shows the popup
}
var start = new XMLHttpRequest();//ajax variable for getting the board and minisquare pointer on load
start.onreadystatechange = function() {
	if (start.readyState === XMLHttpRequest.DONE) {
		returns = start.responseText.split(",");
		getBoard9 = decode(returns[0], 3);
		square = parseInt(returns[1]);
		postBoard9 = getBoard9;//updates both boards (postBoard9 is for board that is being sent to server - after button pressed, and getBoard9 is for getting the board from the server - after the AI move)
		enableButtons(square);//enables buttons depending on the minisquare pointer (-1 means all buttons enabled)
	}
}
function sendStart(){
	start.open('GET', '/board/9', true);
	start.send();
}
function onload(){//function for onload
	disable();
	sendStart();//gets the current board and minisquare pointer from server
}
function enableButtons(tableID){//enables buttons according to tableID
	if (tableID === -1){//enables all buttons
		var ID = 0;
		for (i = 1; i < 81; i += 9){
			for (j = 0; j < 9; j ++){
				ID = i + j;
				try{
					$('button' + ID).disabled = false;//buttons can be pressed
					$('button' + ID).className = 'enabled';//buttons have the css that enabled buttons have (on-hover effects)
				}
				catch(error){
				}
			}
		}
		square = -1;
	}
	else if (checkIfFull(tableID, getBoard9)){//checks if the minisquare is already full or captured; if it is, then it enables all buttons
		var ID = 0;
		for (i = 1; i < 81; i += 9){
			for (j = 0; j < 9; j ++){
				ID = i + j;
				try{
					$('button' + ID).disabled = false;
					$('button' + ID).className = 'enabled';
				}
				catch(error){
				}
			}
		}
		square = -1;
	}
	else{//enables all the buttons in the minisquare
		for (i = (tableID * 9) + 1; i < (tableID * 9) + 10; i ++){
			try{
				$('button' + i).disabled = false;
				$('button' + i).className = 'enabled';
			}
			catch(error){
			}
		}
	}
}
function checkIfFull(minisquare, board){//basically checks if any of the button elements in the specified minisquare exist or not
//if any do exist, then that means the minisquare hasn't been captured nor is full
//if none exist, that means the minisquare has been captured or is full so returns true
	for (k = minisquare * 9; k < (minisquare * 9) + 9; k ++){
		if (board.charAt(k) === '_'){
			return false;
		}
	}
	return true;
}
var post = new XMLHttpRequest();
function changeCell(id){//function called when a button is pressed (id is 1 more than it should, the first button has an id of 1 instead of 0)
	var gameDone = false;
	var num = (Math.floor((id - 1) / 9));//minisquare that was just played in, should mostly be the same as square (the minisquare pointer), except when square is -1 (showing that the previous player could play anywhere)
	postBoard9 = getBoard9;
	$(id).innerHTML = 'X';//changes the square
	postBoard9 = replaceChar(id - 1, postBoard9, 'X');//updates the postBoard9 variable
	if (checkIfCaptured(postBoard9.slice(num * 9, (num + 1) * 9), 'X')){
		$('cell' + num).innerHTML = 'X';//if the minisquare was captured by X, changes the minisquare to X
		if (checkIfWon('X')){//finds if X has won
			outputWinner('X');//if X has won, shows popup
			gameDone = true;
		}
		for (i = num * 9; i < (num + 1) * 9; i ++){
			if (postBoard9.charAt(i) === '_'){
				postBoard9 = replaceChar(i, postBoard9, '*');//changes every space in the captured minisquare into an *
			}
		}
	}
	checkIfDrawn(postBoard9);//checks if game is a draw; if it is, then outputs the popup and shows it being a draw
	square = (id - 1) % 9;//updates the minisquare pointer
	if (checkIfFull(square, postBoard9)){//if the new minisquare pointer points to a minisquare that is captured or full, change the pointer to -1
		square = -1;
	}
	post.open('POST', '/server9', true);
	post.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
	post.send("board=" + encode(postBoard9, 3) + "&square=" + square);//send the new board and square to the server
	disable();//disable the buttons
	if (gameDone !== true){//only if the game is still going will it get a move from the AI
		setTimeout(sendGet, 1000);//in 1 second, it will get a move from the AI
	} 
}
function disable(){//disables all buttons
	var ID = 0;
	for (i = 1; i < 81; i += 9){
		for (j = 0; j < 9; j ++){
			ID = i + j;
			try{
				$('button' + ID).disabled = true;//makes the buttons unable to be clicked
				$('button' + ID).className = 'disabled';//new css for the buttons
			}
			catch(error){
			}
		}
	}
}
function replaceChar(pos, string, symbol){//replaces the position (pos) in the string given with the symbol given
	var String2 = string.split("");
	String2[pos] = symbol;
	return String2.join("");
}
function setBoard(board){//updates the board displayed to the user
	var ID = 0;
	var brd = board.split("");
	for (i = 0; i < brd.length; i ++){
		if (checkIfFull(Math.floor(i / 9), board)){//if the minisquare is full or captured
			var start = Math.floor(i / 9);
			if (checkIfCaptured(board.slice(start * 9, (start + 1) * 9), 'X')){//checks if X has captured it; if X has, updates the board
				$('cell' + start).innerHTML = 'X';
				i = (start + 1) * 9;//skips to next minisquare
			}
			else if (checkIfCaptured(board.slice(start * 9, (start + 1) * 9), 'O')){//checks for O's
				$('cell' + start).innerHTML = 'O';
				i = (start + 1) * 9;
			}
			else{
				$(i + 1).innerHTML = brd[i];//this is for if the minisquare is full and no one has captured it
				//just updates the square with what's in the board variable
			}
		}
		else if (brd[i] !== '_'){//if it's a symbol (X or O)
			try{
				$(i + 1).innerHTML = brd[i];//updates the square
			}
			catch(error){//try catch clause, because sometimes the element it's trying to find (id = i + 1) may not exist (if the minisquare was captured)
			}			
		}
	}
	enableButtons(square);//enables the buttons for the next player
}
function sendGet(){
	get.open('GET', '/AI/3', true);//gets the AI move
	get.send();
}
function checkIfCaptured(board, symbol){//checks if the minisquare was captured by the input symbol
		if (board.charAt(0) === symbol){
			if (board.charAt(1) === symbol && board.charAt(2) === symbol){//line 0, 1, 2
				return true;
			}
			if (board.charAt(3) === symbol && board.charAt(6) === symbol){//line 0, 3, 6
				return true;
			}
			if (board.charAt(4) === symbol && board.charAt(8) === symbol){//line 0, 4, 8
				return true;
			}
		}
		if (board.charAt(1) === symbol){
			if (board.charAt(4) === symbol && board.charAt(7) === symbol){//line 1, 4, 7
				return true;
			}
		}
		if (board.charAt(2) === symbol){
			if (board.charAt(4) === symbol && board.charAt(6) === symbol){//line 2, 4, 6
				return true;
			}
			if (board.charAt(5) === symbol && board.charAt(8) === symbol){//line 2, 5, 8
				return true;
			}
		}
		if (board.charAt(3) === symbol){
			if (board.charAt(4) === symbol && board.charAt(5) === symbol){//line 3, 4, 5
				return true;
			}
		}
		if (board.charAt(6) === symbol){
			if (board.charAt(7) === symbol && board.charAt(8) === symbol){//line 6, 7, 8
				return true;
			}
		}
		return false;
}
function checkIfWon(symbol){//checks if the input symbol has won the whole game
	if ($('cell0').innerHTML === symbol){
		if ($('cell1').innerHTML === symbol && $('cell2').innerHTML === symbol){//minisquares 0, 1, 2
			return true;			
		}
		if ($('cell3').innerHTML === symbol && $('cell6').innerHTML === symbol){//minisquares 0, 3, 6
			return true;
		}
		if ($('cell4').innerHTML === symbol && $('cell8').innerHTML === symbol){//minisquares 0, 4, 8
			return true;
		}
	}
	if ($('cell1').innerHTML === symbol){
		if ($('cell4').innerHTML === symbol && $('cell7').innerHTML === symbol){//minisquares 1, 4, 7
			return true;
		}
	}
	if ($('cell2').innerHTML === symbol){
		if ($('cell4').innerHTML === symbol && $('cell6').innerHTML === symbol){//minisquares 2, 4, 6
			return true;
		}
		if ($('cell5').innerHTML === symbol && $('cell8').innerHTML === symbol){//minisquares 2, 5, 8
			return true;
		}
	}
	if ($('cell3').innerHTML === symbol){
		if ($('cell4').innerHTML === symbol && $('cell5').innerHTML === symbol){//minisquares 3, 4, 5
			return true;
		}
	}
	if ($('cell6').innerHTML === symbol){
		if ($('cell7').innerHTML === symbol && $('cell8').innerHTML === symbol){//minisquares 6, 7, 8
			return true;
		}
	}
	return false;
}
var reset = new XMLHttpRequest();
function outputWinner(symbol){//end of the game, outputs the winner/if it's a draw, and choices
	if (symbol === 'X'){
		$('output').innerHTML = "Player 1 has won";
	}
	else if (symbol === 'O'){
		$('output').innerHTML = "Player 2 has won";
	}
	else if (symbol === '_'){
		$('output').innerHTML = "It's a draw!";
	}
	disable();
	show('popup1');//popup with info on and buttons for main menu or reset
}
function resetIt(menu){//if menu is true, resets game first, then takes the user to the main menu
	if (menu === true){
		reset.open('POST', '/reset', true);
		reset.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
		reset.send("option=9");//resets board without getting the document back
		location.assign("/");//changes the URL back to root page (main menu)
	}
	else{
		reset.open('POST', '/reset', true);
		reset.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
		reset.send("option=9AI");//resets board and gets a new html document back
	}
}
reset.onreadystatechange = function() {//if something has been returned by the http request
    if (reset.readyState == XMLHttpRequest.DONE) {
    	if (reset.responseText !== ""){//as long as something has been returned
        	document.write(reset.responseText);//replaces entire page with new html document
			document.close();
		}
    }
}
$ = function(id) {//shortcut, can write $ instead of document.getElementById
  return document.getElementById(id);
}

var show = function(id) {//changes the display of the div element (popup) from none to block, effectively revealing it
	$(id).style.display ='block';
}
</script>
